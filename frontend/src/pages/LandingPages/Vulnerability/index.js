import React, { useState, useEffect } from "react";
import { useAuth0 } from "@auth0/auth0-react";
import axios from "axios";
import { useParams, Link, useNavigate } from "react-router-dom";

import Container from "@mui/material/Container";
import Icon from "@mui/material/Icon";
import Grid from "@mui/material/Grid";
import Stack from "@mui/material/Stack";

import MKBox from "components/MKBox";
import MKTypography from "components/MKTypography";
import MKButton from "components/MKButton";
import DownloadIcon from "@mui/icons-material/Download";

import NavbarDark from "layouts/sections/navigation/navbars/components/NavbarDark";
import DefaultFooter from "examples/Footers/DefaultFooter";
// import SignIn from "layouts/pages/authentication/sign-in";
import FilledInfoCard from "examples/Cards/InfoCards/FilledInfoCard";

import footerRoutes from "footer.routes";

function Vulnerability() {
  const { loginWithRedirect, logout, isAuthenticated, user } = useAuth0();
  const [vulnerability, setVulnerability] = useState(null);
  const [userRole, setUserRole] = useState(null);
  const [isUserRoleLoading, setIsUserRoleLoading] = useState(true);
  const [isVulnerabilityLoading, setIsVulnerabilityLoading] = useState(true);
  const [isExpanded, setIsExpanded] = useState(false);
  const { id } = useParams();
  const navigate = useNavigate();

  // const isLoading = isUserRoleLoading || isVulnerabilityLoading;
  const isLoading = isVulnerabilityLoading || (isAuthenticated && isUserRoleLoading);

  const MAX_LINES = 2;
  const MAX_CHARACTERS_PER_LINE = 50;

  const handleAuthClick = () => {
    if (isAuthenticated) {
      logout({ returnTo: window.location.origin });
    } else {
      loginWithRedirect();
    }
  };

  const handleDelete = async () => {
    try {
      const response = await axios.get(`/api/auth/current-user`, {
        params: { sub: user.sub },
      });
      console.log("User role response:", response.data);
      const { role } = response.data;

      setUserRole(role);

      if (role !== "admin") {
        alert("You are not authorized to delete this entry.");
        navigate(`/vulnerability-db`);
      }
    } catch (error) {
      console.error("Error fetching user role:", error);
      navigate(`/vulnerability-db`);
    }
  };

  // if (isAuthenticated && user) {
  //   fetchUserRole();
  // } else {
  //   loginWithRedirect();
  // }

  const toggleExpandText = () => {
    setIsExpanded((prev) => !prev);
  };

  useEffect(() => {
    const url = `/api/vulnerability-db/${id}`;
    axios
      .get(url)
      .then((response) => {
        // return response.data;
        setVulnerability(response.data);
        setIsVulnerabilityLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching vulnerability:", error);
        setIsVulnerabilityLoading(false);
      });
  }, [id]);

  console.log("Vulnerability: ", vulnerability);

  useEffect(() => {
    if (isAuthenticated && user) {
      axios
        .get(`/api/auth/current-user`, {
          params: { sub: user.sub },
        })
        .then((res) => {
          setUserRole(res.data.role);
          setIsUserRoleLoading(false);
          console.log("User role fetched:", res.data.role);
        })
        .catch((error) => {
          console.error("Error fetching user role:", error);
          setIsUserRoleLoading(false);
        });
    } else {
      setIsUserRoleLoading(false);
    }
  }, [isAuthenticated, user]);

  const getTruncatedDescription = (description) => {
    if (description) {
      const maxCharacters = MAX_LINES * MAX_CHARACTERS_PER_LINE;
      if (description.length > maxCharacters) {
        return description.slice(0, maxCharacters) + "...";
      }
    }
    return description;
  };

  const downloadAttachment = (vulnid, filename) => {
    fetch(`/api/vulnerability-db/attachments/${vulnid}/${filename}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.blob();
      })
      .then((blob) => {
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      })
      .catch((error) => console.error("Error downloading the file:", error));
  };

  if (isLoading || !vulnerability) return <div>Loading...</div>;

  // console.log("User email from Auth0: ", user?.email);
  // console.log("User email from response: ", vulnerability?.reporterEmail);

  const validAttachments = Array.isArray(vulnerability.attachments)
    ? vulnerability.attachments.filter((a) => a && a.filename)
    : [];

  return (
    <>
      <NavbarDark
        transparent
        light
        onAuthClick={handleAuthClick}
        isAuthenticated={isAuthenticated}
      />
      <Container sx={{ mt: 4, maxWidth: "100%" }}>
        <Grid container spacing={0} alignItems="center">
          <Grid item xs={12}>
            <MKTypography variant="h3" my={1}>
              {vulnerability.title}
            </MKTypography>
            <MKTypography variant="body2" color="text" mb={2}>
              {/* Conditionally show either truncated or full description */}
              {isExpanded
                ? vulnerability.report_description
                : getTruncatedDescription(vulnerability.report_description)}
            </MKTypography>
            {/* Show "See more" link only if description has more than MAX_LINES */}
            {vulnerability.report_description &&
              vulnerability.report_description.length > MAX_LINES * MAX_CHARACTERS_PER_LINE && (
                <MKTypography
                  component="a"
                  href="#"
                  variant="body2"
                  color="info"
                  fontWeight="regular"
                  onClick={(e) => {
                    e.preventDefault();
                    toggleExpandText();
                  }}
                  sx={{
                    width: "max-content",
                    display: "flex",
                    alignItems: "center",
                    cursor: "pointer",
                    "& .material-icons-round": {
                      fontSize: "1.125rem",
                      transform: "translateX(3px)",
                      transition: "transform 0.2s cubic-bezier(0.34, 1.61, 0.7, 1.3)",
                    },
                    "&:hover .material-icons-round, &:focus .material-icons-round": {
                      transform: "translateX(6px)",
                    },
                  }}
                >
                  {isExpanded ? "See less..." : "See more..."}
                  <Icon sx={{ fontWeight: "bold" }}>
                    {isExpanded ? "arrow_upward" : "arrow_forward"}
                  </Icon>
                </MKTypography>
              )}
          </Grid>
        </Grid>
        <Grid
          item
          spacing={0}
          xs={12}
          lg={6}
          sx={{ ml: { xs: -2, lg: "auto" }, mt: { xs: 6, lg: 0 } }}
        >
          <Stack>
            <MKBox display="flex" alignItems="center" p={2}>
              <MKBox
                width="3rem"
                height="3rem"
                variant="gradient"
                bgColor="info"
                color="white"
                coloredShadow="info"
                display="flex"
                alignItems="center"
                justifyContent="center"
                borderRadius="xl"
              >
                <Icon fontSize="small">mediation</Icon>
              </MKBox>
              <MKBox pl={2}>
                <MKTypography variant="body1" color="text">
                  Vulnerability location in lifecycle
                </MKTypography>
                <MKTypography variant="body2" color="bold">
                  {vulnerability.phase}
                </MKTypography>
                <MKTypography variant="body2" color="text">
                  {vulnerability.phaseDescription}
                </MKTypography>
              </MKBox>
            </MKBox>

            <MKBox display="flex" alignItems="center" p={2}>
              <MKBox
                width="3rem"
                height="3rem"
                variant="gradient"
                bgColor="info"
                color="white"
                coloredShadow="info"
                display="flex"
                alignItems="center"
                justifyContent="center"
                borderRadius="xl"
              >
                <Icon fontSize="small">settings_overscan</Icon>
              </MKBox>
              <MKBox pl={2}>
                <MKTypography variant="body1" color="text">
                  Potentially compromised attributes
                </MKTypography>
                <MKTypography variant="body2" color="bold">
                  {vulnerability.attributeName}
                </MKTypography>
                <MKTypography variant="body2" color="text">
                  {vulnerability.attr_Description}
                </MKTypography>
              </MKBox>
            </MKBox>

            <MKBox display="flex" alignItems="center" p={2}>
              <MKBox
                width="3rem"
                height="3rem"
                variant="gradient"
                bgColor="info"
                color="white"
                coloredShadow="info"
                display="flex"
                alignItems="center"
                justifyContent="center"
                borderRadius="xl"
              >
                <Icon fontSize="small">token</Icon>
              </MKBox>
              <MKBox pl={2}>
                <MKTypography variant="body1" color="text">
                  Possible effect of exploitation
                </MKTypography>
                <MKTypography variant="body2" color="bold">
                  {vulnerability.effectName}
                </MKTypography>
                <MKTypography variant="body2" color="text">
                  {vulnerability.eff_Description}
                </MKTypography>
              </MKBox>
            </MKBox>
          </Stack>
        </Grid>
        <Grid container spacing={2} justifyContent="center">
          <Grid item xs={12} md={4}>
            <FilledInfoCard
              color="info"
              icon="apps"
              title="Artifact Type"
              description={vulnerability.artifactType}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <FilledInfoCard
              color="info"
              icon="apps"
              title="Recorded date"
              description={vulnerability.date_added}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <FilledInfoCard
              color="info"
              icon="apps"
              title="Last updated date"
              description={vulnerability.last_updated}
            />
          </Grid>
        </Grid>
        <Grid container spacing={2} justifyContent="left">
          <Grid item xs={12} sm={6} md={4}>
            <MKBox
              p={2}
              sx={{
                textAlign: "left",
              }}
            >
              <MKTypography variant="body1">Report submitted by:</MKTypography>
              <MKTypography variant="body2">{vulnerability.source}</MKTypography>
            </MKBox>
            {vulnerability.developer && (
              <MKBox
                p={2}
                sx={{
                  textAlign: "left",
                }}
              >
                <MKTypography variant="body1">Developer of the system: </MKTypography>
                <MKTypography variant="body2">{vulnerability.developer}</MKTypography>
              </MKBox>
            )}
            {vulnerability.deployer && (
              <MKBox
                p={2}
                sx={{
                  textAlign: "left",
                }}
              >
                <MKTypography variant="body1">Deployer of the system: </MKTypography>
                <MKTypography variant="body2">{vulnerability.deployer}</MKTypography>
              </MKBox>
            )}
            {validAttachments.length > 0 ? (
              <MKBox component="table" width="100%" sx={{ mt: 2 }}>
                <tbody>
                  {validAttachments.map((attachment, index) => (
                    <tr key={index}>
                      <td>
                        <MKButton
                          variant="text"
                          color="info"
                          startIcon={<DownloadIcon />}
                          onClick={() => downloadAttachment(vulnerability.id, attachment.filename)}
                          sx={{
                            textTransform: "none",
                            fontWeight: "normal",
                            justifyContent: "flex-start",
                            minWidth: 200,
                            "&:hover": {
                              backgroundColor: "rgba(0,0,0,0.04)",
                            },
                          }}
                        >
                          {attachment.filename}
                        </MKButton>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </MKBox>
            ) : (
              <MKTypography variant="body2" color="textSecondary" mt={1}>
                No attachments available.
              </MKTypography>
            )}
          </Grid>
        </Grid>
        <Grid
          container
          spacing={2}
          justifyContent="flex-end"
          alignItems="center"
          sx={{ textAlign: "center" }}
        >
          {isAuthenticated &&
            (userRole === "admin" || user.email === vulnerability.reporterEmail) && (
              <MKButton
                component={Link}
                to={`/vulnerability-db/${id}/edit`}
                sx={{
                  padding: 2,
                  textAlign: "center",
                }}
              >
                Edit Details
              </MKButton>
            )}
          {isAuthenticated && userRole === "admin" && (
            <Grid item>
              <MKButton
                onClick={() => handleDelete(id)}
                sx={{
                  padding: 2,
                  textAlign: "center",
                }}
              >
                Delete Entry
              </MKButton>
            </Grid>
          )}
          {!isAuthenticated && (
            <MKTypography variant="body2" color="textSecondary" mt={2}>
              <em>Login to edit or report vulnerabilities.</em>
            </MKTypography>
          )}
        </Grid>
      </Container>
      <MKBox pt={6} px={1} mt={6}>
        <DefaultFooter content={footerRoutes} />
      </MKBox>
    </>
  );
}
export default Vulnerability;

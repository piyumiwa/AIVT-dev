// import { useAuth0 } from "@auth0/auth0-react";
// import * as React from "react";
import React, { useState, useEffect } from "react";
import axios from "axios";

import { DataGrid } from "@mui/x-data-grid";
import Paper from "@mui/material/Paper";
import Container from "@mui/material/Container";
// import Icon from "@mui/material/Icon";
import Grid from "@mui/material/Grid";
import Link from "@mui/material/Link";

import MKBox from "components/MKBox";
import MKTypography from "components/MKTypography";

import DefaultFooter from "examples/Footers/DefaultFooter";
// import SignIn from "layouts/pages/authentication/sign-in";
// import DefaultNavbar from "examples/Navbars/DefaultNavbar";
import footerRoutes from "footer.routes";
import bgImage from "assets/images/bg-db.jpg";

// const routes = [
//   {
//     name: "pages",
//     icon: <Icon>dashboard</Icon>,
//     columns: 1,
//     rowsPerColumn: 2,
//     collapse: [
//       {
//         name: "account",
//         collapse: [
//           {
//             name: "sign in",
//             route: "/authentication/sign-in",
//             component: <SignIn />,
//           },
//         ],
//       },
//     ],
//   },
// ];

const paginationModel = { page: 0, pageSize: 5 };

function VulnerabilityDb() {
  // const { loginWithRedirect, logout, isAuthenticated } = useAuth0();
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [phase, setPhase] = useState("");
  const [attribute, setAttribute] = useState("");
  const [effect, setEffect] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  useEffect(() => {
    // const url = "/api/vulnerability-db";
    // const url = "/api/test";
    // const url = `http://localhost:5000/api/vulnerability-db`;
    const url = `http://localhost:5000/api/vulnerability-db?approval_status=approved&phase=${phase}&attribute=${attribute}&effect=${effect}&startDate=${startDate}&endDate=${endDate}`;

    axios
      .get(url)
      .then((response) => {
        console.log("Response: ", response.data);
        return response.data;
      })
      .then((data) => {
        console.log("JSON response:", data);
        if (Array.isArray(data)) {
          const formattedRows = data.map((vul) => ({
            id: vul.id,
            date_added: vul.date_added,
            title: vul.title,
            artifact: vul.artifactname,
            phase: vul.phase,
            effects: vul.effectname,
            attributes: vul.attributes,
          }));
          setVulnerabilities(formattedRows);
        } else {
          console.error("Fetched data is not an array:", data);
          setVulnerabilities([]);
        }
      })
      .catch((error) => {
        console.error("Error fetching vulnerabilities:", error);
      });
  }, [phase, attribute, effect, startDate, endDate]);

  const clearFilters = () => {
    setPhase("");
    setAttribute("");
    setEffect("");
    setStartDate("");
    setEndDate("");
  };

  // const handleAuthClick = () => {
  //   if (isAuthenticated) {
  //     logout({ returnTo: window.location.origin });
  //   } else {
  //     loginWithRedirect();
  //   }
  // };

  const columns = [
    { field: "id", headerName: "ID", type: "number", width: 70 },
    { field: "date_added", headerName: "Date Added", width: 130 },
    {
      field: "title",
      headerName: "Title",
      description: "This column has a value getter and is not sortable.",
      sortable: false,
      width: 160,
      renderCell: (params) => (
        <a
          href={`/vulnerability-db/${params.row.id}`}
          style={{ textDecoration: "none", color: "inherit" }}
        >
          {params.value}
        </a>
      ),
    },
    {
      field: "artifact",
      headerName: "Artifact",
      width: 130,
    },
    {
      field: "phase",
      headerName: "Phase",
      width: 130,
    },
    {
      field: "effects",
      headerName: "Effects",
      width: 130,
    },
  ];

  return (
    <>
      {/* <DefaultNavbar
        routes={routes}
        action={{
          type: "internal",
          label: isAuthenticated ? "Logout" : "Sign in",
          color: "default",
        }}
        transparent
        light
        onAuthClick={handleAuthClick}
        isAuthenticated={isAuthenticated}
      /> */}
      <MKBox
        minHeight="60vh"
        width="100%"
        sx={{
          backgroundImage: ({ functions: { linearGradient, rgba }, palette: { gradients } }) =>
            `${linearGradient(
              rgba(gradients.dark.main, 0.6),
              rgba(gradients.dark.state, 0.6)
            )}, url(${bgImage})`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          display: "grid",
          placeItems: "center",
        }}
      >
        <Container>
          <Grid
            container
            item
            xs={12}
            lg={8}
            justifyContent="center"
            alignItems="center"
            flexDirection="column"
            sx={{ mx: "auto", textAlign: "center" }}
          >
            <MKTypography
              variant="h2"
              color="white"
              sx={({ breakpoints, typography: { size } }) => ({
                [breakpoints.down("md")]: {
                  fontSize: size["3xl"],
                },
              })}
            >
              Vulnerability Database
            </MKTypography>
            <MKTypography variant="body1" color="white" opacity={0.8} mt={1} mb={3}>
              Welcome to the AIVT Vulnerability Databaseâ€”your ultimate destination for navigating
              the complex landscape of AI vulnerabilities. This comprehensive repository is
              meticulously curated to empower developers, researchers, and security professionals
              with the knowledge they need to identify, assess, and mitigate risks in AI and ML
              systems. Whether you&apos;re looking to safeguard your technology or contribute to the
              collective understanding of AI security, our database is your key resource for staying
              ahead of emerging threats and ensuring the future of AI remains secure and reliable.
            </MKTypography>
          </Grid>
        </Container>
      </MKBox>
      <Container>
        <Grid container justifyContent="flex-end" sx={{ mb: 2 }}>
          <Link
            onClick={clearFilters}
            className="clear-filters-button"
            style={{ cursor: "pointer" }}
          >
            Clear All Filters
          </Link>
        </Grid>
        <Paper sx={{ height: 400, width: "100%" }}>
          <DataGrid
            rows={vulnerabilities}
            columns={columns}
            initialState={{ pagination: { paginationModel } }}
            pageSizeOptions={[5, 10]}
            checkboxSelection
            sx={{ border: 0 }}
          />
        </Paper>
      </Container>
      <MKBox pt={6} px={1} mt={6}>
        <DefaultFooter content={footerRoutes} />
      </MKBox>
    </>
  );
}

export default VulnerabilityDb;
